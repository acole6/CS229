
########################################################################################################
# CLASS STRUCTURE
########################################################################################################

I have two main classes, which are CellularAutomaton and World. The CellularAutomaton class stores 
everything in an automaton file, so it has the terrain, window, colors, chars, name, initial and rule (if 
required). It is responsible for storing and those value and updating the window and terrain if they 
happen to be passed in on the command line. It also determines the next state of a cell base on the type 
of cellular automaton. The values that do not need to be included in the automaton file are window and 
name. It is all right for the initial cells struct to have no cells for any of its identifiers. If no name 
is specified, the name is blank or empty. If no window is specified, the value is NULL. CellularAutomaton 
is also responsible for printing out the automaton in automaton file format.

CellularAutomaton is an abstract class and has two classes that extend it: Brian and RuleAutomaton. Brian 
is the Brian's Brain automaton and RuleAutomaton is an abstract class for automaton that have a rule that 
can change. The classes that extend Rule Automaton are Life and Elementary, which are the Life-like 
automaton and Elementary automaton, respectively.

The World class has more work to do as it is responsible for converting the Terrain in the Life class into 
a 2D grid that is the world. I have the grid stored as a vector of cell vectors. The world can simulate 
life based on the rules of the automaton when it is given a number of generations to simulate. Since it has
its own internal CellularAutomaton object, it can update that life object after the generations have been 
simulated.

The AutomatonParser class is also important because it reads through an automaton file and gets the values 
of all the data to make the other classes' job that much easier. It parses through the file and stores the 
data in a key-value pair with the identifier as the key and the struct or whatever is after the = as the 
value. For example if I read through { Alive = 64; Dead = 124 }, then it would stored as key = Alive and 
value = 64 and key = Dead and value = 124, so if I called chars["Alive"], I would get 64 as a string value 
or an empty string if there was no value to be found. As long as the file is in proper format, this parser 
will ignore extra identifiers that may be in the file. It will ignore them and not say the file is invalid 
due to extra identifiers.

I also have a Settings class that is responsible for reading the command line and assigning values to flags
if given. It also strips comments away and whitespace from the file or from cin to get it ready for 
AutomatonParser to parse it. The settings class will get the last switch of any certain type, but will get 
the first readable file. Below are some examples:

./life file -g 2 -g 10
This will set the generation to 10.

./life fileThatDoesNotExist validFile1 validFile2
This will start reading validFile1 and ignore the other file.

./life file -g 0 -f -v -f -v
This will accept the -v switch since it was the last switch.

./life file -g -tx -100..100
This will actually determine the generation to be the default of 0 instead of throwing an error.

./life file -g -1
This will throw an InvalidArgumentException because the generation is not allowed to be less than 0.

./life file -g 0 -tx -100.100
This will throw an InvalidRangeException. It will also do that if low is higher than high. -100...100 will 
probably still work and interpret high to be 0.

./lifegui file -s -tx -100..100
This will set size to the default value of 10.

./lifegui file -s -1 -g 22
This will throw an InvalidArgumentException because the grid size cannot be less than 0

All invalid switches will be ignored.
./lifegui -a 2 -g 1 file -s 1 -control
-a and -control will be ignored but the rest will be accepted.

Beyond that, I broke up each major identifier in the automaton file into its own class. There is a Range 
class that takes care of both Window and Terrain, there is a Colors class, a Chars class and an Initial 
class. Range can update ranges if they are given on the command line and make sure ranges are valid. It 
also prints out ranges in life file format. Colors and Chars are also similar to Range. Initial makes 
sure that the cells given in the life file fit the terrain and if they do not, then it will wrap them 
around into the terrain. Initial also converts world grid cells back into terrain cells after the world 
has finished its simulation.

Cell keeps track of individual cell info, like x pos, y pos and its state, which uses the State enum 
class that has DEFAULT, ALIVE, ONE, FIRING and READY Color stores a color in an int vector by RGB values.

GuiWidet is responsible for painting a given world in grid format to be displayed in a window. The 
GuiWidget now supports horizontal and vertical scroll bars that only show up if necessary.

Control is the control dialog box for the GuiWidget. It creates a GuiWidget based on the World. It has 
two sliders that allow delay and grid size to be adjusted. When the grid size is adjusted, the GuiWidger 
is updated and the widow is refreshed to show the changes. There is also a box to type in a grid size. The 
range for the grid size has a minimum of 1 and a maximum of 100 and will not throw an error if the command 
line input exceeds the maximum (will thrown one if the command line input is less than 0). If it exceeds 
the maximum, it will be set to 100.

The delay sliders and box behave similarly, but for the delay on the timer. The range is from 0 to 10000 
milliseconds, which is 0 to 10 seconds. The default is 4 seconds (4000 milliseconds). If the simulation 
has been started, the slider will adjust the time but will not stop the simulation.

Button functionality:
-Quit    - This will exit the application and close both windows. It should exit without any errors (may
           be qt memory issues though).
-Restart - This will reset the simulation to generation 0 based on the initial cells of the automaton. If
           the simulation was started, this will cause it to stop but will not alter the delay value or 
           grid size.
-Play    - This will start the simulation based on the delay value. The slider can be adjusted and so can
           the value in the delay box and the simulation delay will be updated as the simulation 
           continues. Once the simulation has been started, it stopped by pressing Restart, Quit or Step.
           The simulation simulates one generation at a time.
-Step    - This will simulate one generation and then update the GuiWidget. If the simulation was started,
           this will stop it but will not alter the delay or grid size.

########################################################################################################
# SOURCE CODE
########################################################################################################

Programs:

########################################################################################################
# life
########################################################################################################

Usage: ./life

Will take a file from the command line or read from standard in.

life represents a game of life for a cellular automaton in either an ascii grid or in automaton file format
based on the number of generations that have passed.

Supported automaton: Life-like, Elementary, and Brian's Brain.

Supported switches:
-g n specifies the desired generation number. n is 0 by default
-f Sends output to cout or standard out in the same format as input file.\n -h displays the help menu.
-tx l..h sets the x range for the terrain in the format of low to high (low..high), which overrides the 
 terrain values in input.
-ty l..h sets the y range for the terrain in the format of low to high (low..high), which overrides the 
 terrain values in input.
-v Sends output to cout or standard out in the format of an ascii grid
-wx l..h sets the x range for the window in the format of low to high (low..high), which overrides the 
 window values in input.
-wy l..h sets the y range for the window in the format of low to high (low..high), which overrides the 
 window values in input.

Window values whether given in input on or command line with take precedence over terrain values when 
world is displayed as ascii characters. By default output is in the form of -v flag and a name is not 
required for input.

The terrain wraps around, so if window is beyond terrain ranges, the terrain will wrap around and be 
printed to fill the window ranges.

########################################################################################################
# lifegui
########################################################################################################

Usage: ./lifegui

Will take a file form the command line or read from standard in

lifegui represents a cellular automaton file as a graphical grid.

Supported automaton: Life-like, Elementary, and Brian's Brain.

Supported switches:
-h displays the help menu.
-g n specifies the desired generation number. n is 0 by default
-tx l..h sets the x range for the terrain in the format of low to high (low..high), which overrides the 
 terrain values in input.
-ty l..h sets the y range for the terrain in the format of low to high (low..high), which overrides the 
 terrain values in input.
-wx l..h sets the x range for the window in the format of low to high (low..high), which overrides the 
 window values in input.
-wy l..h sets the y range for the window in the format of low to high (low..high), which overrides the 
 window values in input.
-s will set the size in pixels of each square in the grid. If the size is less than 4, grid lines will not 
 be displayed. Grid size is 10 by default
-c will display a control dialog box to interact with the simulation.

Button functionality:
-Quit    - This will exit the application and close both windows. It should exit without any errors (may 
           be qt memory issues though).
-Restart - This will reset the simulation to generation 0 based on the initial cells of the automaton. If 
           the simulation was started, this will cause it to stop but will not alter the delay value or 
           grid size.
-Play    - This will start the simulation based on the delay value. The slider can be adjusted and so can 
           the value in the delay box and the simulation delay will be updated as the simulation continues.
           Once the simulation has been started, it stopped by pressing Restart, Quit or Step. The 
           simulation simulates one generation at a time.
-Step    - This will simulate one generation and then update the GuiWidget. If the simulation was started, 
           this will stop it but will not alter the delay or grid size.
		   
-Grid size box and slider adjusts the size of the grid squares in pixels
-Delay box and slider adjusts the delay between generations in simulation

Window values whether given in input on or command line with take precedence over terrain values when world
is displayed. The terrain wraps around, so if window is beyond terrain ranges, the terrain will wrap around
and be printed to fill the window ranges
--------------------------------------------------------------------------------------------------------

Source:

cell.cc

Implements cell.h. This class keeps track of cell x and y positions, as well as the State of the cell. 
--------------------------------------------------------------------------------------------------------
chars.cc
Implements chars.h. This is an abstract class that stores automaton chars. It has a default character 
value. It is extended by BrianChars, LifeChars and ElemetnaryChars.
--------------------------------------------------------------------------------------------------------
brianchars.cc
Implements brianchars.h. Brian's Brain chars, which are refactory (default), ready and firing.
--------------------------------------------------------------------------------------------------------
lifechars.cc
Implements  lifechars.h. Life-like chars, which are dead (default) and alive.
--------------------------------------------------------------------------------------------------------
elementarychars.cc
Implements elementarychars.h. Elementary chars, which are zero (default) and one.
--------------------------------------------------------------------------------------------------------
color.cc
Implements color.h This class stores a color in an int vector where position 0 is red, 1 is green and 2 
is blue
--------------------------------------------------------------------------------------------------------
colors.cc
Implements colors.h This is an abstract class that stores automaton colors. It has a default color 
value. It is extended by BrianColors, LifeColors and ElemetnaryColors.
--------------------------------------------------------------------------------------------------------
briancolors.cc
Implements briancolors.h. Brian's Brain colors, which are refactory (default), ready and firing.
--------------------------------------------------------------------------------------------------------
lifecolors.cc
Implemetns lifecolors.h. Life-like colors, which are dead (default) and alive.
--------------------------------------------------------------------------------------------------------
elementarycolors.cc
Implements elementarycolors.h. Elemetnary colors, which are zero (default) and one.
--------------------------------------------------------------------------------------------------------
initial.cc
Implements initial.h. This is an abstract class that stores automaton initial cells. It is extended by 
BrianInitial, LifeInitial and ElemetnaryInitial.
--------------------------------------------------------------------------------------------------------
brianintial.cc
Implements brianinitial.h. Brian's Brain initial cells, which could be made up of ready and/or firing 
cells.
--------------------------------------------------------------------------------------------------------
lifeinitial.cc
Implements lifeinitial.h. Life-like initial cells, which can only be made up of alive cells.
--------------------------------------------------------------------------------------------------------
elementaryinitial.cc
Implements elemetnaryinitial. Elementary initial cells, which can only be made up of one cells.
--------------------------------------------------------------------------------------------------------
cellularautomaton.cc
Implements cellularautomaton.h. Abstract cellular automaton class.
--------------------------------------------------------------------------------------------------------
ruleautomaton.cc
Implements ruleautoamton.h Abstract rule cellular automaton class. This extends CellularAutomaton. It is
a type of cellular automaton that can have a rule that changes.
--------------------------------------------------------------------------------------------------------
brian.cc
Implements brian.h. Brian's Brain automaton. This extends CellularAutomaton.
--------------------------------------------------------------------------------------------------------
lifeclass.cc
Implements lifeclass.h. Life-like automaton. This extends RuleAutomaton. Its rule is in the form of 
B01.../S01... where the values can be 0-8 (inclusive).
--------------------------------------------------------------------------------------------------------
elementary.cc
Implements elementary.h Elemetnary automaton. This extends RuleAutomaton. Its rule is a number between 
0-255 (inclusive).
--------------------------------------------------------------------------------------------------------
automatonparser.cc
Implements automatonarser.h. This class parses though a automaton file that has been stripped of 
comments and whitespace and breaks it up into key-value pairs or identifier-value pairs
--------------------------------------------------------------------------------------------------------
range.cc
Implements range.h. This class stores values from wither a terrain struct or window struct. Its values 
can be updated based on command line values
--------------------------------------------------------------------------------------------------------
settings.cc
Implements settings.h This class keeps track of all the settings entered in on the command line and 
makes it easier for the programs to access them. Also strips the info in the life file or from standard 
input of comments and whitespace.
--------------------------------------------------------------------------------------------------------
world.cc
Implements world.h. This class creates a grid to represent a life to be simulated through multiple 
generations. It uses a cellular automaton to create the world and stores it into a vector of Cell 
vectors like a 2D array. It updates the automaton with non-default cells once the simulation is over and
is used to print out the grid in ascii or the gui by either using the terrain or window ranges.
--------------------------------------------------------------------------------------------------------
lifewidget.cc
Implements lifewidget.h. This class extends QWidget and is used to paint the world by terrain or window 
ranges onto a window to be displayed.
--------------------------------------------------------------------------------------------------------
control.cc
Implements control.h This is a control dialog box used to manipulate the GuiWidget and simulate through 
the generations of a cellular automaton.
--------------------------------------------------------------------------------------------------------

Header Files:

cell.h
Cell class description and function prototypes. An enum class called State is included in this file. 
Enums: DEFAULT, ALIVE, ONE, READY, and FIRING
--------------------------------------------------------------------------------------------------------
chars.h
Chars class description and function prototypes.
--------------------------------------------------------------------------------------------------------
brianchars.h
BrianChars class description and function prototypes.
--------------------------------------------------------------------------------------------------------
lifechars.h
LifeChars class description and function prototypes.
--------------------------------------------------------------------------------------------------------
elemetnarychars.h
ElementaryChars class description and function prototypes.
--------------------------------------------------------------------------------------------------------
color.h
Color class description and function prototypes.
--------------------------------------------------------------------------------------------------------
colors.h
Colors class description and function prototypes.
--------------------------------------------------------------------------------------------------------
briancolors.h
BrianChars class description and function prototypes.
--------------------------------------------------------------------------------------------------------
lifecolors.h
LifeChars class description and function prototypes.
--------------------------------------------------------------------------------------------------------
elementarycolors.h
ElementaryChars class description and function prototypes.
--------------------------------------------------------------------------------------------------------
initial.h
Initial class description and function prototypes.
--------------------------------------------------------------------------------------------------------
brianinitial.h
BrianInitial class description and function prototypes.
--------------------------------------------------------------------------------------------------------
lifeinitial.h
LifeInitial class description and function prototypes.
--------------------------------------------------------------------------------------------------------
elementaryinitial.h
ElementaryInitial class description and function prototypes.
--------------------------------------------------------------------------------------------------------
cellularautomon.h
CellularAutomaton class description and function prototypes.
--------------------------------------------------------------------------------------------------------
ruleautomaton.h
RuleAutomaton class description and function prototypes.
--------------------------------------------------------------------------------------------------------
brian.h
Brian class description and function prototypes.
--------------------------------------------------------------------------------------------------------
lifeclass.h
Life class description and function prototypes.
--------------------------------------------------------------------------------------------------------
elementary.h
Elementary class description and function prototypes.
--------------------------------------------------------------------------------------------------------
automatonparser.h
AutomatonParser class description and function prototypes.
--------------------------------------------------------------------------------------------------------
range.h
Range class description and function prototypes.
--------------------------------------------------------------------------------------------------------
settings.h
Settings class description and function prototypes.
--------------------------------------------------------------------------------------------------------
World class description and function prototypes.
--------------------------------------------------------------------------------------------------------
lifewidget.h
GuiWidget class description and function prototypes.
--------------------------------------------------------------------------------------------------------
control.h
Control class description and function prototypes.
--------------------------------------------------------------------------------------------------------

########################################################################################################
# TODO
########################################################################################################

Get rid of any memory leaks, clean up code and make more functions. See if I can make the Qt classes 
nicer. Think about redoing some code to make use of references. And always, fix bugs and test more.
