
########################################################################################################
# SIMP IMAGE DATA STORAGE
########################################################################################################

/*struct to store 32-bit pixel info. 0 - red, 1 - green, 2 - blue, 3 - alpha*/
struct pixel
{
	unsigned char color[4];
};
typedef struct pixel pixel_t;

/*struct to store simp file info*/
struct simp
{
	int width;
	int height;
	pixel_t **pixels;
};
typedef struct simp simp_t;

I created a type called simp_t that represents my simp structure, which has an integer to store the 
width, an integer to store the height and another type I created to called pixel_t that stores a 2D 
array of pixels.

My pixel_t type is made up of a struct pixel that has an array of unsigned chars to store the pixel 
color.0 is the red channel, 1 is the green channel, 2 is the blue channel and 3 is the alpha channel. 
I originally had 4 separate chars, which made it more obvious what channel was what, but the array 
makes it easier to write code with less lines (i.e. loops and passings the color as a parameter).

########################################################################################################
# ACT FILE DATA STOREAGE
########################################################################################################

/*struct stores text id and the text in value*/
struct line
{
	char *id;
	char *value;
};
typedef struct line line_t;

/*act struct stores act file info*/
struct act
{
	char *outfile;
	char *meme;
	char *font;
	int num_ids;
	line_t *lines;
};
typedef struct act act_t;

For the action file, I created two structs to store the data in the file. The line struct stores the 
text ids, like top, bottom, etc. and the value is the actual text that will get overlaid. The act struct
stores multiple line structs, as well as the outfile, the meme and the font.

########################################################################################################
# FSF FILE DATA STORAGE
########################################################################################################

/*struct to store character data. ch is the character
position[0] is the x pos, position[1] is the y pos, 
position[2] is the width, and position[3] us the height*/
struct character
{
	char ch;
	int position[4];
};
typedef struct character character_t;

/*struct to store fsf file info*/
struct fsf
{
	char *name;
	char *image;
	int num_characters;
	character_t *characters;
};
typedef struct fsf fsf_t;

For the font file, I created two structs to store the data in the file. The character struct stores the 
character and, as well as the x pos, the y pos, the width and the height in an int array. The fsf struct 
has an array of characters, as well as the name and the image.

########################################################################################################
# MEM FILE DATA STORAGE
########################################################################################################

/*point struct to store width (x) and height (y)*/
struct point
{
	int x;
	int y;
};
typedef struct point point_t;

/*struct to store text position*/
struct position
{
	char *name;
	point_t startpoint;
};
typedef struct position position_t;

/*struct to store a meme*/
struct s_meme
{
	char *name;
	char *file;
	int num_pos;
	position_t *positions;
};
typedef struct s_meme meme_t;

/*data structure to store mem file info*/
struct mem
{
	int num_memes;
	int num_fonts;
	meme_t *memes;
	char **fonts;
};
typedef struct mem mem_t;

For the meme file, I created four structs to store the data. The point struct, just stores the x and y 
pos. The position struct stores the text id, as well as the point for the text to start. The meme struct 
stores the name of the meme, the file of the meme and the number of text ids. The mem struct stores an 
array of memes and an array of fonts available.

########################################################################################################
# SOURCE CODE
########################################################################################################

Programs:

########################################################################################################
# crop
########################################################################################################
Usage: ./crop infile outfile x y width height

infile  - should be a simp file
outfile - any valid filename. if it is an existing file, it will be overwritten (hopefully it wasn't 
	  important)
x       - staring position for cropping. range is 0 to width - 1
y       - starting position for cropping. range is 0 to height - 1
width   - the width of the resulting cropped file. range is from 1 to width - x. this is in order to not  
          exceed the original image's bounds
height  - the height of the resulting cropped file. range is from 1 to height - y. this is in order to 
	  not exceed the original image's bounds

This file is the source code for the crop program. It makes use of simp.h in order to crop a file given 
the specified dimensions. If all goes well, crop produces a cropped image. The program will exit 
gracefully if the program is given invalid settings. x and y have default values of 0 if not given or 
if something that is not a number is given in their place. If width and height are not given, they have 
a default value of the original image's width and height. If the argument given is not a number for the 
width or height, the program will exit gracefully due to the width and height value will get converted 
to 0 and that is outside of the 1 to width/height - x/y range.

If there is a problem reading the infile (assuming it is a simp file), the program will exit gracefully 
with an error message. This program assumes that the infile will be a simp file and not any other type 
of file. it also assumes that the simp file width and height will be positive values. The resulting file
will be a cropped version of the original simp file bassed on the arguments passed. The resulting file 
should be a valid simp file. The original file is not altered.

########################################################################################################
# bw
########################################################################################################
Usage: ./bw infile outfile

infile  - should be a simp file
outfile - any valid filename. if it is an existing file, it will be overwritten (hopefully it wasn't 
          important)

This file is the source code for the bw program. It makes use of simp.h in order to convert a simp file 
to black and white. If all goes well, bw produces a black and white image. The program will exit 
gracefully if the program is given invalid settings.

If there is a problem reading the infile (assuming it is a simp file), the program will exit gracefully 
with an error message. This program assumes that the infile will be a simp file and not any other type 
of file. it also assumes that the simp file width and height will be positive values. The resulting file 
will be a black and white version of the original simp file. The resulting file should be a valid simp 
file. The black and white values are are calculated by taking the average of each pixels red, blue and 
green channels and flooring the result. The original file is not altered.

For example, floor((red + green + blue) / 3), where the input in floor is a double/float value. This is 
not what the actual code looks like, but is the basic idea. 

########################################################################################################
# colorshift
########################################################################################################
Usage: ./colorshift infile outfile pattern

infile  - should be a simp file
outfile - any valid filename. if it is an existing file, it will be overwritten (hopefully it wasn't 
          important)
pattern - string in the form of one of the following: RGB GBR BRG RBG BGR GRB RG GR RB BR GB BG

This file is the source code for the colorshift program. It makes use of simp.h in order to shift the 
color channels values of a given simp file. If all goes well, colorshift produces an image with its 
color channels shift based on the given pattern. The program will exit gracefully if the program is 
given invalid settings. If the pattern does not match one of the patterns listed above, the program will 
exit gracefully with and error message stating that the pattern is invalid. The pattern must be given as 
all upper case letters with no spaces or characters between the letters.

If there is a problem reading the infile (assuming it is a simp file), the program will exit gracefully 
with an error message. This program assumes that the infile will be a simp file and not any other type 
of file. it also assumes that the simp file width and height will be positive values. The resulting file 
will be a shifted version of the original simp file. The resulting file should be a valid simp file. The 
original file is not altered.

Explanation of the color shift:
If the pattern given is RGB, then red replaces green, green replaces blue and blue replaces red. If the 
pattern given is RG, then red is swapped with green.

########################################################################################################
# overlay
########################################################################################################
Usage: ./overlay bottomfile topfile outfile x y

bottomfile - should be a simp file and will have the topfile overlaid on it
topfile    - should be a simp file and will be overlaid on the bottomfile
outfile    - any valid filename. if it is an existing file, it will be overwritten (hopefully it wasn't 
             important)
x          - staring in bottomfile image for the topfile image to be overlaid on. range is 0 to 
	     width - 1
y          - staring in bottomfile image for the topfile image to be overlaid on. range is 0 to 
	     height - 1

This file is the source code for the overlay program. It makes use of simp.h in order to overlay a simp 
file image on top of another simple image given the specified dimensions. If all goes well, overlay 
produces an image with the top image overlaid on the bottom. The program will exit gracefully if the 
program is given invalid settings. x and y have default values of 0 if not given or if something that is 
not a number is given in their place.

If there is a problem reading the infile (assuming it is a simp file), the program will exit gracefully 
with an error message. This program assumes that the infile will be a simp file and not any other type 
of file. it also assumes that the simp file width and height will be positive values. The resulting file 
will be an image with the top image overlaid on the bottom image. The resulting file should be a valid 
simp file. The original bottomfile and topfile will not be altered.

Overlay will not exceed or extend the width and height of the bottom image, so if the top image happens 
to go beyond the bounds of the bottom image, the portion of the top image beyond the bounds will not be 
overlaid on top of the bottom image. Below is an example:

------------    	    ------------
+          +                +  bottom  +
+          +                +   _______+
+  bottom  +                +   + top  +
+          +                +   +      +
+          +                +   +      +
+          +                +   +      +
------------                ------------

------------
+          +
+          +
+    top   +
+          +
+          +
+          +
------------

########################################################################################################
# meme
########################################################################################################
Usage: ./meme meme_file action_file

meme_file   - meme file with a list of memes
action_file - action file used to generate a meme

This file is the source code for the meme program. It makes use of simp.h, act.h, mem.h, fsf.h and 
utility.h in order generate a meme. It reads a meme file and an action file in order to generate the 
meme. The files are stored in separate structs and the action file is used to find which meme to overlay 
on image. To overlay the font, the functions from the crop and overlay program are used. The program is 
designed not to fail if positions in the action file are not in the meme file or if characters in the 
phrases overlaid on the image are not in the font file. In those cases a meme will still be generated 
with the information that the action file was able to find from the meme and font files. 

Helper Code:

simp.h
-------------------------------------------------------------------------------------------------------
This is a header file that has the structs described at the beginning of this document that are used to 
store the data within a simp file. Also in this file are function prototypes that are associated with 
reading simp files and making use of the simp file data stored in the simp data structures.

simp.c
-------------------------------------------------------------------------------------------------------
This is the implementation of the function prototypes in the header file simp.h. The functions in this 
file are designed to help read and write simp files, as well make use of the data stored in simp file 
data structures after a simp file is read.

########################################################################################################
# action
########################################################################################################

act.h
-------------------------------------------------------------------------------------------------------
This is a header file that has the structs described at the beginning of this document that are used to 
store the data within a act file. Also in this file are function prototypes that are associated with 
reading act files and making use of the act file data stored in the act data structures.

act.c
-------------------------------------------------------------------------------------------------------
This is the implementation of the function prototypes in the header file act.h. The functions in this 
file are designed to help read act files, as well make use of the data stored in act file data 
structures after an act file is read.

########################################################################################################
# font
########################################################################################################

fsf.h
-------------------------------------------------------------------------------------------------------
This is a header file that has the structs described at the beginning of this document that are used to 
store the data within a fsf file. Also in this file are function prototypes that are associated with 
reading fsf files and making use of the fsf file data stored in the act data structures.

fsf.c
-------------------------------------------------------------------------------------------------------
This is the implementation of the function prototypes in the header file fsf.h. The functions in this 
file are designed to help read fsf files, as well make use of the data stored in fsf file data 
structures after a fsf file is read.

########################################################################################################
# meme
########################################################################################################

mem.h
-------------------------------------------------------------------------------------------------------
This is a header file that has the structs described at the beginning of this document that are used to 
store the data within a mem file. Also in this file are function prototypes that are associated with 
reading mem files and making use of the mem file data stored in the mem data structures.

mem.c
-------------------------------------------------------------------------------------------------------
This is the implementation of the function prototypes in the header file mem.h. The functions in this 
file are designed to help read mem files, as well make use of the data stored in mem file data 
structures after a mem file is read.

########################################################################################################
# utility
########################################################################################################

utility.h
-------------------------------------------------------------------------------------------------------
This is a header file with prototypes that could be useful to all of the different source code files

utility.c
-------------------------------------------------------------------------------------------------------
This is the implementation of the prototypes in utility.h

########################################################################################################
# TODO
########################################################################################################

I would like to clean my code up more so that it is even easier to read. Parsing the text files looks 
sloppy at points, so I would like to make that nicer. Create more functions and organize the code in a 
nicer way. Also I would like to redesign many of the functions to make sure it is easier to keep track 
of when memory needs to be freed to prevent seg faults and leaks. And of course, do more testing and add 
more checks for potential errors.
